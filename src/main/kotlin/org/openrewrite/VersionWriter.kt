package org.openrewrite

import java.net.URI
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.StandardOpenOption
import org.openrewrite.RecipeMarkdownGenerator.Companion.useAndApply
import org.openrewrite.RecipeMarkdownGenerator.Companion.writeln

class VersionWriter {
    fun createLatestVersionsMarkdown(
        outputPath: Path,
        recipeOrigins: Collection<RecipeOrigin>,
        rewriteBomVersion: String,
        rewriteRecipeBomVersion: String,
        moderneRecipeBomVersion: String,
        gradlePluginVersion: String,
        mavenPluginVersion: String
    ) {
        val versionsSnippetPath = outputPath.resolve("latest-versions-of-every-openrewrite-module.md")
        Files.newBufferedWriter(versionsSnippetPath, StandardOpenOption.CREATE).useAndApply {
            val rewriteBomLink =
                "[${rewriteBomVersion}](https://github.com/openrewrite/rewrite/releases/tag/v${rewriteBomVersion})"
            val rewriteRecipeBomLink =
                "[${rewriteRecipeBomVersion}](https://github.com/openrewrite/rewrite-recipe-bom/releases/tag/v${rewriteRecipeBomVersion})"
            val moderneBomLink =
                "[${moderneRecipeBomVersion}](https://github.com/moderneinc/rewrite-recipe-bom/releases/tag/v${moderneRecipeBomVersion})"
            val mavenLink =
                "[${mavenPluginVersion}](https://github.com/openrewrite/rewrite-maven-plugin/releases/tag/v${mavenPluginVersion})"
            val gradleLink =
                "[${gradlePluginVersion}](https://github.com/openrewrite/rewrite-gradle-plugin/releases/tag/v${gradlePluginVersion})"

            //language=markdown
            writeln(
                """
                ---
                description: An autogenerated table with the latest version of each OpenRewrite module. Updates on an OpenRewrite release.
                ---

                # Latest versions of every OpenRewrite module

                OpenRewrite's modules are published to [Maven Central](https://search.maven.org/search?q=org.openrewrite).
                Each time a release is made, a bill of materials artifact is also published to correctly align and manage the versions of all published artifacts.
                The Gradle plugin is published to the [Gradle Plugin Portal](https://plugins.gradle.org/plugin/org.openrewrite.rewrite).

                It is highly recommended that developers use the [rewrite-recipe-bom](https://github.com/openrewrite/rewrite-recipe-bom)
                to align the versions of Rewrite's modules to ensure compatibility.
                The use of the "bill of materials" means that a developer will only need to specify explicit versions of the BOM and the build plugins:

                | Module                                                                                                                | Version    | License |
                |-----------------------------------------------------------------------------------------------------------------------| ---------- | ------- |
                | [**org.openrewrite:rewrite-bom**](https://github.com/openrewrite/rewrite)                                             | **${rewriteBomLink}** | ${Licenses.Apache2.markdown()} |
                | [**org.openrewrite:rewrite-maven-plugin**](https://github.com/openrewrite/rewrite-maven-plugin)                       | **${mavenLink}** | ${Licenses.Apache2.markdown()} |
                | [**org.openrewrite:rewrite-gradle-plugin**](https://github.com/openrewrite/rewrite-gradle-plugin)                     | **${gradleLink}** | ${Licenses.Apache2.markdown()} |
                | [**org.openrewrite.recipe:rewrite-recipe-bom**](https://github.com/openrewrite/rewrite-recipe-bom)                    | **${rewriteRecipeBomLink}** | ${Licenses.Apache2.markdown()} |
                | [**io.moderne.recipe:moderne-recipe-bom**](https://github.com/moderneinc/moderne-recipe-bom)                          | **${moderneBomLink}** | ${Licenses.Proprietary.markdown()} |
                """.trimIndent()
            )
            var cliInstallGavs = ""
            var loadRecipesAsync = ""
            for (origin in recipeOrigins) {

                cliInstallGavs += "${origin.groupId}:${origin.artifactId}:{{${origin.versionPlaceholderKey()}}} "

                val loadCommand = "load_" + (origin.groupId + '_' + origin.artifactId)
                    .replace('-', '_')
                    .replace('.', '_')
                //language=graphql
                loadRecipesAsync += """
                  $loadCommand: loadRecipesAsync(
                    groupId: "${origin.groupId}"
                    artifactId: "${origin.artifactId}"
                    version: "LATEST"
                  ) {
                    id
                  }"""

                val repoLink = "[${origin.groupId}:${origin.artifactId}](${origin.repositoryUrl})"
                val releaseLink = "[${origin.version}](${origin.releaseUrl(origin.version)})"
                writeln("| ${repoLink.padEnd(117)} | ${releaseLink.padEnd(90)} | ${origin.license.markdown()} |")
            }
            //language=markdown
            writeln(
                """
                
                ## CLI Installation
                
                Install the latest versions of all the OpenRewrite recipe modules into the Moderne CLI:
                
                ```bash
                mod config recipes jar install ${cliInstallGavs}
                ```
                
                ## Moderne Installation
                
                Install the latest versions of all the OpenRewrite [recipe modules into Moderne](https://docs.moderne.io/administrator-documentation/moderne-dx/how-to-guides/deploying-recipe-artifacts-in-moderne-dx) using the GraphQL endpoint.
                
                <details>
                <summary>
                Show GraphQL mutation.
                </summary>
                
                ```graphql
                mutation seedOpenRewriteArtifacts {
                ${loadRecipesAsync}
                }
                ```
                
                </details>
                """.trimIndent()
            )
        }
    }

    fun createLatestVersionsJs(
        outputPath: Path,
        recipeOrigins: Collection<RecipeOrigin>,
        rewriteRecipeBomVersion: String,
        gradlePluginVersion: String,
        mavenPluginVersion: String
    ) {
        val versionsSnippetPath = outputPath.resolve("latest-versions.js")
        Files.newBufferedWriter(versionsSnippetPath, StandardOpenOption.CREATE).useAndApply {
            var recipeModuleVersions = ""
            for (origin in recipeOrigins) {
                recipeModuleVersions += "                  \"{{${origin.versionPlaceholderKey()}}}\": \"${origin.version}\",\n"
            }
            writeln(
                //language=ts
                """
                const latestVersions = {
                  "{{VERSION_REWRITE_RECIPE_BOM}}": "${rewriteRecipeBomVersion}",
                  "{{VERSION_REWRITE_GRADLE_PLUGIN}}": "${gradlePluginVersion}",
                  "{{VERSION_REWRITE_MAVEN_PLUGIN}}": "${mavenPluginVersion}",
                  ${recipeModuleVersions.trim()}
                };
                export default latestVersions;
                """.trimIndent()
            )
        }
    }
}
