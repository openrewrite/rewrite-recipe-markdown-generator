package org.openrewrite.writers

import org.openrewrite.Licenses
import org.openrewrite.RecipeOrigin
import java.net.URI
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.StandardOpenOption

/**
 * Writes version information files (JavaScript and Markdown)
 */
class VersionWriter(
    private val recipeOrigins: Map<URI, RecipeOrigin>,
    private val rewriteBomVersion: String,
    private val rewriteRecipeBomVersion: String,
    private val moderneRecipeBomVersion: String,
    private val mavenPluginVersion: String,
    private val gradlePluginVersion: String
) : MarkdownWriter {
    
    override fun write(outputPath: Path) {
        writeLatestVersionsJs(outputPath)
        writeLatestVersionsMarkdown(outputPath)
    }
    
    private fun writeLatestVersionsJs(outputPath: Path) {
        val versionsJsPath = outputPath.resolve("latest-versions.js")
        Files.newBufferedWriter(versionsJsPath, StandardOpenOption.CREATE).useAndApply {
            writeln("export const latestVersions = {")
            writeln("  \"org.openrewrite:rewrite-bom\": \"$rewriteBomVersion\",")
            writeln("  \"org.openrewrite:rewrite-gradle-plugin\": \"$gradlePluginVersion\",")
            writeln("  \"org.openrewrite:rewrite-maven-plugin\": \"$mavenPluginVersion\",")
            writeln("  \"org.openrewrite.recipe:rewrite-recipe-bom\": \"$rewriteRecipeBomVersion\",")
            writeln("  \"io.moderne.recipe:moderne-recipe-bom\": \"$moderneRecipeBomVersion\",")
            
            recipeOrigins.values.forEach { origin ->
                writeln("  \"${origin.groupId}:${origin.artifactId}\": \"${origin.version}\",")
            }
            
            writeln("};")
        }
    }
    
    private fun writeLatestVersionsMarkdown(outputPath: Path) {
        val versionsSnippetPath = outputPath.resolve("latest-versions-of-every-openrewrite-module.md")
        Files.newBufferedWriter(versionsSnippetPath, StandardOpenOption.CREATE).useAndApply {
            val rewriteBomLink = "[$rewriteBomVersion](https://github.com/openrewrite/rewrite/releases/tag/v$rewriteBomVersion)"
            val rewriteRecipeBomLink = "[$rewriteRecipeBomVersion](https://github.com/openrewrite/rewrite-recipe-bom/releases/tag/v$rewriteRecipeBomVersion)"
            val moderneBomLink = "[$moderneRecipeBomVersion](https://github.com/moderneinc/rewrite-recipe-bom/releases/tag/v$moderneRecipeBomVersion)"
            val mavenLink = "[$mavenPluginVersion](https://github.com/openrewrite/rewrite-maven-plugin/releases/tag/v$mavenPluginVersion)"
            val gradleLink = "[$gradlePluginVersion](https://github.com/openrewrite/rewrite-gradle-plugin/releases/tag/v$gradlePluginVersion)"

            //language=markdown
            writeln("""
                ---
                description: An autogenerated table with the latest version of each OpenRewrite module. Updates on an OpenRewrite release.
                ---

                # Latest versions of every OpenRewrite module

                OpenRewrite's modules are published to [Maven Central](https://search.maven.org/search?q=org.openrewrite).
                Each time a release is made, a bill of materials artifact is also published to correctly align and manage the versions of all published artifacts.
                The Gradle plugin is published to the [Gradle Plugin Portal](https://plugins.gradle.org/plugin/org.openrewrite.rewrite).

                It is highly recommended that developers use the [rewrite-recipe-bom](https://github.com/openrewrite/rewrite-recipe-bom)
                to align the versions of Rewrite's modules to ensure compatibility.
                The use of the "bill of materials" means that a developer will only need to specify explicit versions of the BOM and the build plugins:

                | Module                                                                                                                | Version    | License |
                |-----------------------------------------------------------------------------------------------------------------------| ---------- | ------- |
                | [**org.openrewrite:rewrite-bom**](https://github.com/openrewrite/rewrite)                                             | **$rewriteBomLink** | ${Licenses.Apache2.markdown()} |
                | [**org.openrewrite:rewrite-maven-plugin**](https://github.com/openrewrite/rewrite-maven-plugin)                       | **$mavenLink** | ${Licenses.Apache2.markdown()} |
                | [**org.openrewrite:rewrite-gradle-plugin**](https://github.com/openrewrite/rewrite-gradle-plugin)                     | **$gradleLink** | ${Licenses.Apache2.markdown()} |
                | [**org.openrewrite.recipe:rewrite-recipe-bom**](https://github.com/openrewrite/rewrite-recipe-bom)                    | **$rewriteRecipeBomLink** | ${Licenses.Apache2.markdown()} |
                | [**io.moderne.recipe:moderne-recipe-bom**](https://github.com/moderneinc/moderne-recipe-bom)                          | **$moderneBomLink** | ${Licenses.Proprietary.markdown()} |
                """.trimIndent()
            )
            
            var cliInstallGavs = ""
            var loadRecipesAsync = ""
            
            for (origin in recipeOrigins.values) {
                cliInstallGavs += "${origin.groupId}:${origin.artifactId}:{{${origin.versionPlaceholderKey()}}} "
                
                val loadCommand = "load_" + (origin.groupId + '_' + origin.artifactId)
                    .replace('-', '_')
                    .replace('.', '_')
                    
                //language=graphql
                loadRecipesAsync += """
                  $loadCommand: loadRecipesAsync(
                    organization: {
                      organizationId: "All"
                    }
                    options: {
                      searchRecipesInDependenciesOfSourceFiles: true
                      activeStyles: []
                      pomCache: {}
                      availableRecipesAndStyles: [
                        {
                          group: "${origin.groupId}"
                          artifact: "${origin.artifactId}"
                          targetVersion: "latest.release"
                        }
                      ]
                    }
                  ) {
                    id
                    recipes {
                      origin {
                        groupId
                        artifactId
                        version
                      }
                      id
                      name
                      displayName
                      description
                      tags
                      estimatedEffortPerOccurrence
                      options {
                        name
                        description
                        type
                        defaultValue
                        required
                      }
                      dataTables {
                        name
                        displayName
                        description
                      }
                      languages
                      styles {
                        name
                        displayName
                        description
                        tags
                      }
                    }
                  }
                """.trimIndent() + "\n"
                
                writeln("""| ${origin.groupId}:${origin.artifactId} | ${origin.version} | ${origin.license?.markdown() ?: Licenses.Unknown.markdown()} |""")
            }
            
            writeln()
            writeln("## Moderne CLI installation")
            writeln()
            writeln("Install the Moderne CLI and run the recipes on your codebase by running:")
            writeln()
            writeln("```shell")
            writeln("mod config recipes jar install $cliInstallGavs\\")
            writeln("  --repositories=https://repo1.maven.org/maven2,https://oss.sonatype.org/content/repositories/snapshots")
            writeln("```")
            writeln()
            writeln("## GraphQL query to get the list of recipes")
            writeln()
            writeln("This GraphQL query can be used to list all of the recipes and styles loaded on an instance of Moderne.")
            writeln("It is provided here for reference. It is used to populate the [recipe catalog](https://docs.openrewrite.org/recipes).")
            writeln()
            writeln("{% code overflow=\"wrap\" %}")
            writeln("```graphql")
            writeln("{")
            writeln(loadRecipesAsync)
            writeln("}")
            writeln("```")
            writeln("{% endcode %}")
        }
    }
}